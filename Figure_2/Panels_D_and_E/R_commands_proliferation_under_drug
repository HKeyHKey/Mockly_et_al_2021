library(plotrix)
library(nlme)
library(car)

genotypes=read.table('Genotypes.dat',header=T)

for (assay in 1:3)
for (drug in c('5FU','DOX'))
{
print(paste("Drug:",drug," assay:",assay))
values_genotype=c()
values_clone=c()
values_m=list()
values_s=list()
index_values=0
response=c()
conc=c()
geno=c()
clone=c()
replicate=c()
if (drug=='5FU') concentration=c(0,0.208*10^-6,0.52*10^-6,1.3*10^-6,3.26*10^-6,8.15*10^-6,20.375*10^-6,50.9375*10^-6,127.3438*10^-6,318.3595*10^-6)
if (drug=='DOX') concentration=c(0,0.1792*10^-8, 0.448*10^-8, 1.12*10^-8, 2.8*10^-8, 7*10^-8, 17.5*10^-8, 43.75*10^-8, 109.375*10^-8, 273.4375*10^-8)
y_range=2
for (file in list.files(pattern=paste('^',drug,'.*assay',assay,'.csv',sep='')))
{
data=read.csv(file,skip=26,sep='\t',header=F)
line1=as.numeric(sub('-.*','',sub('_.*','',sub(paste(drug,'_HCT_',sep=''),'',file))))
line2=as.numeric(sub('.*-','',sub('_.*','',sub(paste(drug,'_HCT_',sep=''),'',file))))
out1=data[2:4,2:(ncol(data)-1)]
out2=data[5:7,2:(ncol(data)-1)]
for (repl in 1:3)
{
response=append(response,as.numeric(out1[repl,])/as.numeric(out1[repl,])[1])
conc=append(conc,concentration)
geno=append(geno,rep(as.character(genotypes$Genotype[genotypes$Line_number==line1]),ncol(out1)))
clone=append(clone,rep(line1,ncol(out1)))
replicate=append(replicate,rep(repl,ncol(out1)))
response=append(response,as.numeric(out2[repl,])/as.numeric(out2[repl,])[1])
conc=append(conc,concentration)
geno=append(geno,rep(as.character(genotypes$Genotype[genotypes$Line_number==line2]),ncol(out2)))
clone=append(clone,rep(line2,ncol(out2)))
replicate=append(replicate,rep(repl,ncol(out2)))
}
m=as.numeric(apply(out1,2,mean))
s=as.numeric(apply(out1,2,std.error))
values_genotype=append(values_genotype,as.character(genotypes$Genotype[genotypes$Line_number==line1]))
values_clone=append(values_clone,line1)
index_values=index_values+1
values_m[[index_values]]=m
values_s[[index_values]]=s
m=as.numeric(apply(out2,2,mean))
s=as.numeric(apply(out2,2,std.error))
values_genotype=append(values_genotype,as.character(genotypes$Genotype[genotypes$Line_number==line2]))
values_clone=append(values_clone,line2)
index_values=index_values+1
values_m[[index_values]]=m
values_s[[index_values]]=s
}

wt_colors=c('black','gray20','gray40','gray60')
ko_colors=c('chocolate1','orangered','red','red3')
x=c(min(concentration[concentration>0]))
add=x[length(x)]
while (add<max(concentration))
{
add=x[length(x)]*(max(concentration)/min(concentration[concentration>0]))^0.01
x=append(x,add)
}

### Below: mixed-effect model (fixed effect by 'Concentration', random effect by 'Clone', possibly structured by 'Genotype')

# Fitting to SSAym using non-linear modeling:
Response=response[conc>0]
Concentration=conc[conc>0]
Genotype=geno[conc>0]
Clone=as.factor(clone[conc>0])
ex=groupedData(Response~Concentration|Genotype/Clone)
vIdent_clone=varIdent(form=~1|Clone)
vIdent_genotype=varIdent(form=~1|Genotype)

if (drug=='5FU') lrc_guess=12
if (drug=='DOX') lrc_guess=16
if (assay<=2) SIZE=1e6 # otherwise, some fits may fail to converge in assays 1 and 2
if (assay==3) SIZE=4e4 # otherwise, some fits may fail because of computationally singular systems in assay 3
print("model1")
model_without_same_variance=nlme(Response ~ SSasymp(Concentration, Asym, R0, lrc),data = ex,fixed = Asym + R0 + lrc ~ 1,random = Asym + R0 + lrc ~ 1|Clone,start = c(Asym = 0, R0 = 1, lrc = lrc_guess),control = lmeControl(maxIter = SIZE, msMaxIter = SIZE, pnlsMaxIter = SIZE, niterEM = SIZE))
print("model2")
model_with_same_variance=nlme(Response ~ SSasymp(Concentration, Asym, R0, lrc),data = ex,fixed = Asym + R0 + lrc ~ 1,random = Asym + R0 + lrc ~ 1|Genotype/Clone,start = c(Asym = 0, R0 = 1, lrc = lrc_guess),control = lmeControl(maxIter = SIZE, msMaxIter = SIZE, pnlsMaxIter = SIZE, niterEM = SIZE))
print("model3")
model_without_variance_per_genotype=nlme(Response ~ SSasymp(Concentration, Asym, R0, lrc),data = ex,fixed = Asym + R0 + lrc ~ 1,random = Asym + R0 + lrc ~ 1|Clone,start = c(Asym = 0, R0 = 1, lrc = lrc_guess),weights=vIdent_genotype,control = lmeControl(maxIter = SIZE, msMaxIter = SIZE, pnlsMaxIter = SIZE, niterEM = SIZE))
print("model4")
model_with_variance_per_genotype=nlme(Response ~ SSasymp(Concentration, Asym, R0, lrc),data = ex,fixed = Asym + R0 + lrc ~ 1,random = Asym + R0 + lrc ~ 1|Genotype/Clone,start = c(Asym = 0, R0 = 1, lrc = lrc_guess),weights=vIdent_genotype,control = lmeControl(maxIter = SIZE, msMaxIter = SIZE, pnlsMaxIter = SIZE, niterEM = SIZE))
print("model5")
model_without_variance_per_clone=nlme(Response ~ SSasymp(Concentration, Asym, R0, lrc),data = ex,fixed = Asym + R0 + lrc ~ 1,random = Asym + R0 + lrc ~ 1|Clone,start = c(Asym = 0, R0 = 1, lrc = lrc_guess),weights=vIdent_clone,control = lmeControl(maxIter = SIZE, msMaxIter = SIZE, pnlsMaxIter = SIZE, niterEM = SIZE))
print("model6")
model_with_variance_per_clone=nlme(Response ~ SSasymp(Concentration, Asym, R0, lrc),data = ex,fixed = Asym + R0 + lrc ~ 1,random = Asym + R0 + lrc ~ 1|Genotype/Clone,start = c(Asym = 0, R0 = 1, lrc = lrc_guess),weights=vIdent_clone,control = lmeControl(maxIter = SIZE, msMaxIter = SIZE, pnlsMaxIter = SIZE, niterEM = SIZE))
sink(paste('Model_comparison_output_',drug,'_assay_',assay,'.txt',sep=''))
print("Same variance:")
print(anova(model_with_same_variance,model_without_same_variance))
print("Variance per genotype:")
print(anova(model_with_variance_per_genotype,model_without_variance_per_genotype))
print("Variance per clone:")
print(anova(model_with_variance_per_clone,model_without_variance_per_clone))
sink()

model_list=list(model_with_same_variance,model_without_same_variance,model_with_variance_per_genotype,model_without_variance_per_genotype,model_with_variance_per_clone,model_without_variance_per_clone)
model_desc=c('same_variance_with_genotype_information','same_variance_without_genotype_information','variance_per_genotype_with_genotype_information','variance_per_genotype_without_genotype_information','variance_per_clone_with_genotype_information','variance_per_clone_without_genotype_information')

for (m in 1:length(model_list))
{
pdf(paste('Residual_analysis_',drug,'_assay_',assay,'_model_',model_desc[m],'.pdf',sep=''),width=12,height=12)
res <- resid(model_list[[m]],type="normalized")
fitted <- fitted(model_list[[m]])
par(mfrow=c(2,2))
hist(res,breaks=50, main="Residual histogram:",xlab='Residuals')
qqnorm(res,main=paste('Q-Q plot (Shapiro-Wilk p-value: ',signif(shapiro.test(res)$p.value,digits=4),')',sep=''))
qqline(res)
plot(res ~ fitted, main="Adjusted values:",xlab="Fitted",ylab="Residuals")
plot(res ~ Clone, main=paste('Residuals by clone (Bartlett p-value: ',signif(bartlett.test(res~Clone)$p.value,digits=4),'):',sep=''),ylab="Residuals",xlab="Clone")
dev.off()
sink(paste('Applicability_',drug,'_assay_',assay,'_model_',model_desc[m],'.txt',sep=''))
print("Residual normality (Shapiro-Wilk test):")
print(signif(shapiro.test(res)$p.value,digits=4))
print("Variance homogeneity (Bartlett test):")
print(signif(bartlett.test(res~Clone)$p.value,digits=4))
sink()

pdf(paste('Proliferation_upon_',drug,'_treatment_assay',assay,'_model_',model_desc[m],'.pdf',sep=''),width=6,height=6)
plot(1,1,xlim=range(Concentration),ylim=c(0,y_range),log='x',xlab='Drug concentration (M)',ylab='Cell number (relative to untreated)',main=paste('Drug:',drug))
wt=0;ko=0
for (i in 1:index_values)
{
if (values_genotype[i]=='WT')
{
wt=wt+1
color=wt_colors[wt]
}
if (values_genotype[i]=='KO')
{
ko=ko+1
color=ko_colors[ko]
}
plotCI(concentration[concentration>0],values_m[[i]][concentration>0]/values_m[[i]][concentration==0],values_s[[i]][concentration>0]/values_m[[i]][concentration==0],col=color,xlim=range(concentration[concentration>0]),ylim=c(0,y_range),xlab='',ylab='',add=T)
par(new=T)
Asym=model_list[[m]]$coef$fixed[1]
R0=model_list[[m]]$coef$fixed[2]
lrc=model_list[[m]]$coef$fixed[3]
if (length(model_list[[m]]$coef$random$Genotype)>0) # model "with" genotype
{
Asym=Asym+model_list[[m]]$coef$random$Genotype[rownames(model_list[[m]]$coef$random$Genotype)==values_genotype[i],colnames(model_list[[m]]$coef$random$Genotype)=='Asym']
R0=R0+model_list[[m]]$coef$random$Genotype[rownames(model_list[[m]]$coef$random$Genotype)==values_genotype[i],colnames(model_list[[m]]$coef$random$Genotype)=='R0']
lrc=lrc+model_list[[m]]$coef$random$Genotype[rownames(model_list[[m]]$coef$random$Genotype)==values_genotype[i],colnames(model_list[[m]]$coef$random$Genotype)=='lrc']
Asym=Asym+model_list[[m]]$coef$random$Clone[rownames(model_list[[m]]$coef$random$Clone)==paste(values_genotype[i],'/',values_clone[i],sep=''),colnames(model_list[[m]]$coef$random$Clone)=='Asym']
R0=R0+model_list[[m]]$coef$random$Clone[rownames(model_list[[m]]$coef$random$Clone)==paste(values_genotype[i],'/',values_clone[i],sep=''),colnames(model_list[[m]]$coef$random$Clone)=='R0']
lrc=lrc+model_list[[m]]$coef$random$Clone[rownames(model_list[[m]]$coef$random$Clone)==paste(values_genotype[i],'/',values_clone[i],sep=''),colnames(model_list[[m]]$coef$random$Clone)=='lrc']
} else # model "without" genotype
{
Asym=Asym+model_list[[m]]$coef$random$Clone[rownames(model_list[[m]]$coef$random$Clone)==values_clone[i],colnames(model_list[[m]]$coef$random$Clone)=='Asym']
R0=R0+model_list[[m]]$coef$random$Clone[rownames(model_list[[m]]$coef$random$Clone)==values_clone[i],colnames(model_list[[m]]$coef$random$Clone)=='R0']
lrc=lrc+model_list[[m]]$coef$random$Clone[rownames(model_list[[m]]$coef$random$Clone)==values_clone[i],colnames(model_list[[m]]$coef$random$Clone)=='lrc']
}
plot(x,SSasymp(x,Asym,R0,lrc),log='x',ty='l',xlim=range(concentration[concentration>0]),ylim=c(0,y_range),xlab='',ylab='',axes=F,col=color,lwd=2)
write.csv(c(Asym,R0,lrc),paste('Fitted_parameters_model_',model_desc[[m]],'_',drug,'_assay_',assay,'.csv',sep=''))
}
dev.off()
}

}
